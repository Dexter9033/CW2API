{
  "version": 3,
  "sources": ["../../models/users.ts"],
  "sourcesContent": ["import * as db from '../helpers/database'\nimport crypto from 'crypto';\n\n\nexport async function getAll(limit = 10, page = 1) {\n  const offset = (page - 1) * limit\n  const query = \"SELECT * FROM users LIMIT ? OFFSET ?\"\n  const data = await db.run_query(query, [limit, offset])\n  return data\n}\n\nexport async function getSearch(s, q) {\n  const query = `SELECT ${s} FROM users WHERE ${s} LIKE '%${q}%'`\n  const data = await db.run_query(query)\n  return data\n}\n\nexport async function getByUserId(id) {\n  const query = \"SELECT * FROM users WHERE id=?\"\n  const values = [id]\n  const data = await db.run_query(query, values)\n  return data\n}\n\n\nfunction generateRandomString(length: number): string {\n  return crypto.randomBytes(Math.ceil(length / 2))\n    .toString('hex')\n    .slice(0, length);\n}\n\n\nexport async function add(user) {\n  const salt = generateRandomString(32);\n  const hash = crypto.pbkdf2Sync(user.password, salt, 1000, 64, 'sha512').toString('hex');\n  user.password = hash\n  let keys = Object.keys(user)\n  let values = Object.values(user)\n  keys = keys.join(',')\n  let parm = ''\n  for (let i = 0; i < values.length; i++) { parm += '?,' }\n  parm = parm.slice(0, -1)\n  console.log(keys, parm)\n  values.push(salt)\n  const query = `INSERT INTO users (${keys}, salt) VALUES (${parm}, ?)`\n  try {\n    await db.run_query(query, values)\n    return { \"status\": 201 }\n  } catch (error) {\n    return error\n  }\n}\nexport async function findByUsername(username) {\n  const query = \"SELECT * FROM users WHERE username = ?\"\n  const values = [username]\n  const data = await db.run_query(query, values)\n  return data\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoB;AACpB,oBAAmB;AAGnB,eAAsB,OAAO,QAAQ,IAAI,OAAO,GAAG;AACjD,QAAM,UAAU,OAAO,KAAK;AAC5B,QAAM,QAAQ;AACd,QAAM,OAAO,MAAM,GAAG,UAAU,OAAO,CAAC,OAAO,MAAM,CAAC;AACtD,SAAO;AACT;AAEA,eAAsB,UAAU,GAAG,GAAG;AACpC,QAAM,QAAQ,UAAU,sBAAsB,YAAY;AAC1D,QAAM,OAAO,MAAM,GAAG,UAAU,KAAK;AACrC,SAAO;AACT;AAEA,eAAsB,YAAY,IAAI;AACpC,QAAM,QAAQ;AACd,QAAM,SAAS,CAAC,EAAE;AAClB,QAAM,OAAO,MAAM,GAAG,UAAU,OAAO,MAAM;AAC7C,SAAO;AACT;AAGA,SAAS,qBAAqB,QAAwB;AACpD,SAAO,cAAAA,QAAO,YAAY,KAAK,KAAK,SAAS,CAAC,CAAC,EAC5C,SAAS,KAAK,EACd,MAAM,GAAG,MAAM;AACpB;AAGA,eAAsB,IAAI,MAAM;AAC9B,QAAM,OAAO,qBAAqB,EAAE;AACpC,QAAM,OAAO,cAAAA,QAAO,WAAW,KAAK,UAAU,MAAM,KAAM,IAAI,QAAQ,EAAE,SAAS,KAAK;AACtF,OAAK,WAAW;AAChB,MAAI,OAAO,OAAO,KAAK,IAAI;AAC3B,MAAI,SAAS,OAAO,OAAO,IAAI;AAC/B,SAAO,KAAK,KAAK,GAAG;AACpB,MAAI,OAAO;AACX,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAAE,YAAQ;AAAA,EAAK;AACvD,SAAO,KAAK,MAAM,GAAG,EAAE;AACvB,UAAQ,IAAI,MAAM,IAAI;AACtB,SAAO,KAAK,IAAI;AAChB,QAAM,QAAQ,sBAAsB,uBAAuB;AAC3D,MAAI;AACF,UAAM,GAAG,UAAU,OAAO,MAAM;AAChC,WAAO,EAAE,UAAU,IAAI;AAAA,EACzB,SAAS,OAAP;AACA,WAAO;AAAA,EACT;AACF;AACA,eAAsB,eAAe,UAAU;AAC7C,QAAM,QAAQ;AACd,QAAM,SAAS,CAAC,QAAQ;AACxB,QAAM,OAAO,MAAM,GAAG,UAAU,OAAO,MAAM;AAC7C,SAAO;AACT;",
  "names": ["crypto"]
}
