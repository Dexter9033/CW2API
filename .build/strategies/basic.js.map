{
  "version": 3,
  "sources": ["../../strategies/basic.ts"],
  "sourcesContent": ["import {BasicStrategy} from 'passport-http'\nimport * as model from '../models/users'\nimport crypto from 'crypto';\n\n\nfunction verifyPassword(user, password){\n  \n  const newpw = crypto.pbkdf2Sync(password, user.salt, 1000, 64,     'sha512').toString('hex');\n  return user.password === newpw\n}\n\nconst checkUserAndPass = async (username, password, done) => {\n  let result\n  try{\n    result = await model.findByUsername(username)\n  } catch(error) {\n    return done(error)\n  }\n  if(result.length){\n    const user = result[0]\n    if(verifyPassword(user, password)){\n      console.log(`Successfully authenticated user ${username}`)\n      return done(null, user)\n    } else {\n      console.log(`Password incorrect for user ${username}`)\n    }\n  } else {\n    console.log(`No user found with username ${username}`)\n  }\n  return done(null,false)\n}\n\nconst strategy = new BasicStrategy(checkUserAndPass)\n\nexport default strategy"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA4B;AAC5B,YAAuB;AACvB,oBAAmB;AAGnB,SAAS,eAAe,MAAM,UAAS;AAErC,QAAM,QAAQ,cAAAA,QAAO,WAAW,UAAU,KAAK,MAAM,KAAM,IAAQ,QAAQ,EAAE,SAAS,KAAK;AAC3F,SAAO,KAAK,aAAa;AAC3B;AAEA,MAAM,mBAAmB,OAAO,UAAU,UAAU,SAAS;AAC3D,MAAI;AACJ,MAAG;AACD,aAAS,MAAM,MAAM,eAAe,QAAQ;AAAA,EAC9C,SAAQ,OAAN;AACA,WAAO,KAAK,KAAK;AAAA,EACnB;AACA,MAAG,OAAO,QAAO;AACf,UAAM,OAAO,OAAO;AACpB,QAAG,eAAe,MAAM,QAAQ,GAAE;AAChC,cAAQ,IAAI,mCAAmC,UAAU;AACzD,aAAO,KAAK,MAAM,IAAI;AAAA,IACxB,OAAO;AACL,cAAQ,IAAI,+BAA+B,UAAU;AAAA,IACvD;AAAA,EACF,OAAO;AACL,YAAQ,IAAI,+BAA+B,UAAU;AAAA,EACvD;AACA,SAAO,KAAK,MAAK,KAAK;AACxB;AAEA,MAAM,WAAW,IAAI,mCAAc,gBAAgB;AAEnD,IAAO,gBAAQ;",
  "names": ["crypto"]
}
